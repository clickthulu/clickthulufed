<?php

namespace App\Command;

use ActivityPhp\Type\Extended\Object\Note;
use App\Entity\Page;
use App\Helpers\SettingsHelper;
use App\Service\Settings;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Stopwatch\Stopwatch;


#[AsCommand(
    name: 'app:page:announce',
    description: 'Generates an activitypub message when a new page becomes public'
)]
class AnnouncePageCommand extends Command
{
    private SymfonyStyle $io;

    public function __construct(private readonly EntityManagerInterface $entityManager, private readonly Settings $settings)
    {
        parent::__construct();
    }

    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
    }

    /**
     * This optional method is the first one executed for a command after configure()
     * and is useful to initialize properties based on the input arguments and options.
     */
    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
        // SymfonyStyle is an optional feature that Symfony provides so you can
        // apply a consistent look to the commands of your application.
        // See https://symfony.com/doc/current/console/style.html
        $this->io = new SymfonyStyle($input, $output);
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        $stopwatch = new Stopwatch();
        $stopwatch->start('page-announce-command');
        $now = new \DateTime();


        /** @noinspection PhpPossiblePolymorphicInvocationInspection */
        $pages = $this->entityManager->getRepository(Page::class)->findUnannouncedPages();
        $settings = $this->settings->get();
        $server = $settings['server_url'] ?? "";

        /**
         * @var Page $page
         */
        foreach ($pages as $page) {
            $this->io->writeln("Announcing {$page->getTitle()}");
            $page->setPageAnnounced(true);
            try {
                $image = new Note();
                $image
                    ->set('id', "{$server}/@{$page->getComic()->getSlug()}/page/{$page->slug()}")
                    ->set('name', $page->getTitle())
                    ->set('image', "{$server}/@{$page->getComic()->getSlug()}/{$page->getImageLink()}");


                print_r($image);
            } catch (\Exception $e){
                $this->io->error("Exception {$e->getMessage()}");
            }


//            $this->entityManager->persist($page);
        }
//        $this->entityManager->flush();

        return Command::SUCCESS;
    }

}